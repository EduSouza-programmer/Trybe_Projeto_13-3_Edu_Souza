{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","placeholder","id","type","className","value","onChange","event","updateMovie","target","htmlFor","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","defaultProps","MovieCard","data-testid","alt","src","to","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovie","movieId","find","mov","parseInt","Promise","resolve","setTimeout","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","EditMovie","status","shouldRedirect","fecthMovie","match","movieAPI","params","requestMovie","MovieDetails","loading","a","filter","MovieList","fecthMovies","requestMovies","key","NewMovie","NotFound","App","basename","process","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8181d574.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return <div>Carregando...</div>;\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Insira o título\"\n          id=\"movie_title\"\n          type=\"text\"\n          className=\"validate\"\n          value={title}\n          onChange={(event) => this.updateMovie('title', event.target.value)}\n        />\n        <label htmlFor=\"movie_title\">Título</label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Insira o subtítulo\"\n          id=\"movie_subtitle\"\n          type=\"text\"\n          value={subtitle}\n          onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n        />\n        <label htmlFor=\"movie_subtitle\">Subtítulo</label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <input\n          placeholder=\"Insira o caminho da imagem\"\n          id=\"movie_image\"\n          type=\"text\"\n          value={imagePath}\n          onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n        />\n        <label htmlFor=\"movie_image\">Imagem</label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <textarea\n          id=\"movie_storyline\"\n          value={storyline}\n          onChange={(event) => this.updateMovie('storyline', event.target.value)}\n        />\n        <label htmlFor=\"movie_storyline\">Sinopse</label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">Gênero</label>\n        <select\n          id=\"movie_genre\"\n          value={genre}\n          onChange={(event) => this.updateMovie('genre', event.target.value)}\n        >\n          <option value=\"action\">Ação</option>\n          <option value=\"comedy\">Comédia</option>\n          <option value=\"thriller\">Suspense</option>\n          <option value=\"fantasy\">Fantasia</option>\n        </select>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Dê a avaliação do filme\"\n          id=\"movie_rating\"\n          type=\"number\"\n          step={0.1}\n          min={0}\n          max={5}\n          value={rating}\n          onChange={(event) => this.updateMovie('rating', event.target.value)}\n        />\n        <label htmlFor=\"movie_rating\">Avaliação</label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button type=\"button\" onClick={this.handleSubmit}>\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.defaultProps = {\n  movie: {\n    title: '',\n    subtitle: '',\n    storyline: '',\n    rating: 0,\n    imagePath: '',\n    genre: '',\n  },\n};\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.number,\n    imagePath: PropTypes.string,\n    genre: PropTypes.string,\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { id, title, subtitle, storyline, imagePath } = this.props.movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={imagePath} />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">\n            {title}\n          </h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Link to={`/movies/${id}`}>VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor() {\n    super();\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n      movie: [],\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.fecthMovie();\n  }\n\n  async fecthMovie() {\n    const { match } = this.props;\n    const requestMovie = await movieAPI.getMovie(match.params.id);\n    this.setState({ movie: requestMovie, status: 'loaded' });\n  }\n\n  async handleSubmit(updatedMovie) {\n    await movieAPI.updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n\n    if (shouldRedirect) {\n      // Redirect\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      // render Loading\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movie: {},\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fecthMovie();\n  }\n\n  fecthMovie() {\n    this.setState({ loading: true }, async () => {\n      const { match } = this.props;\n      const requestMovie = await movieAPI.getMovie(match.params.id);\n      this.setState({ movie: requestMovie, loading: false });\n    });\n  }\n\n  render() {\n    // Change the condition to check the state\n    // if (true) return <Loading />;\n\n    const { movie, loading } = this.state;\n\n    const { id, title, storyline, imagePath, genre, rating, subtitle } = movie;\n\n    return (\n      <div data-testid=\"movie-details\">\n        {loading ? (\n          <Loading />\n        ) : (\n          <div>\n            <img alt=\"Movie Cover\" src={`../${imagePath}`} />\n            <p>{`Title: ${title}`}</p>\n            <p>{`Subtitle: ${subtitle}`}</p>\n            <p>{`Storyline: ${storyline}`}</p>\n            <p>{`Genre: ${genre}`}</p>\n            <p>{`Rating: ${rating}`}</p>\n            <Link to={`/movies/${id}/edit`}>EDITAR</Link>\n            <Link to=\"/\">VOLTAR</Link>\n            <Link to=\"/\" onClick={() => movieAPI.deleteMovie(id)}>\n              DELETAR\n            </Link>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MovieCard, Loading } from '../components';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fecthMovies();\n  }\n\n  fecthMovies() {\n    this.setState({ loading: true }, async () => {\n      const requestMovies = await movieAPI.getMovies();\n      this.setState({ movies: requestMovies, loading: false });\n    });\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n\n    // Render Loading here if the request is still happening\n\n    return (\n      <div data-testid=\"movie-list\">\n        {loading ? (\n          <Loading />\n        ) : (\n          movies.map((movie) => <MovieCard key={movie.title} movie={movie} />)\n        )}\n        <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      loading: false,\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    this.setState({ loading: true }, async () => {\n      await movieAPI.createMovie(newMovie);\n      this.setState({ loading: false, shouldRedirect: true });\n    });\n  }\n\n  render() {\n    const { loading, shouldRedirect } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n    return (\n      <div data-testid=\"new-movie\">\n        {loading ? <Loading /> : <MovieForm onSubmit={this.handleSubmit} />}\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport {\n  MovieList,\n  MovieDetails,\n  NewMovie,\n  EditMovie,\n  NotFound,\n} from './pages';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path='/' component={MovieList} />\n        <Route path='/movies/new' component={NewMovie} />\n        <Route exact path='/movies/:id' component={MovieDetails} />\n        <Route path='/movies/:id/edit' component={EditMovie} />\n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}